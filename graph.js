// Generated by CoffeeScript 1.6.2
(function() {
  var MabogoGraph, MabogoGraphConstants, RadialPlacement, Utility,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  RadialPlacement = function() {
    var center, current, innerIncrement, place, placement, radialLocation, radius, setKeys, start, values;

    values = d3.map();
    innerIncrement = 20;
    radius = 150;
    center = {
      "x": 0,
      "y": 0
    };
    start = 0;
    current = start;
    radialLocation = function(center, angle, radius) {
      var x, y;

      x = center.x + radius * Math.cos(angle * Math.PI / 180);
      y = center.y + radius * Math.sin(angle * Math.PI / 180);
      return {
        "x": x,
        "y": y
      };
    };
    placement = function(key) {
      var value;

      value = values.get(key);
      if (!values.has(key)) {
        value = place(key);
      }
      return value;
    };
    place = function(key) {
      var value;

      value = radialLocation(center, current, radius);
      values.set(key, value);
      current += innerIncrement;
      return value;
    };
    setKeys = function(keys) {
      var innerKeys;

      values = d3.map();
      innerIncrement = 360 / keys.length;
      innerKeys = keys.splice(0);
      return innerKeys.forEach(function(k) {
        return place(k);
      });
    };
    placement.keys = function(_) {
      if (!arguments.length) {
        return d3.keys(values);
      }
      setKeys(_);
      return placement;
    };
    placement.center = function(_) {
      if (!arguments.length) {
        return center;
      }
      center = _;
      return placement;
    };
    placement.radius = function(_) {
      if (!arguments.length) {
        return radius;
      }
      radius = _;
      return placement;
    };
    placement.start = function(_) {
      if (!arguments.length) {
        return start;
      }
      start = _;
      current = start;
      return placement;
    };
    return placement;
  };

  Utility = (function() {
    function Utility() {}

    Utility.prototype.mapAMinusB = function(A, B) {
      var retMap;

      retMap = d3.map();
      A.keys().forEach(function(key) {
        if (!B.has(key)) {
          return retMap.set(key, A.get(key));
        }
      });
      return retMap;
    };

    Utility.prototype.mapNodes = function(nodes) {
      var nodesMap;

      nodesMap = d3.map();
      nodes.forEach(function(node) {
        return nodesMap.set(node.id, node);
      });
      return nodesMap;
    };

    return Utility;

  })();

  MabogoGraphConstants = (function() {
    function MabogoGraphConstants() {
      this.NORMAL_LINK_OPACITY = 0.5;
      this.HIDDEN_LINK_OPACITY = 0.0;
      this.HIDDEN_NODE_OPACITY = 0.05;
      this.GRAPH_WIDTH = 800;
      this.GRAPH_HEIGHT = 600;
    }

    return MabogoGraphConstants;

  })();

  MabogoGraph = (function() {
    function MabogoGraph(body, data) {
      this.body = body;
      this._resetUserAction = __bind(this._resetUserAction, this);
      this._userNodeAction = __bind(this._userNodeAction, this);
      this._userActionDispatcher = __bind(this._userActionDispatcher, this);
      this._setUserActionHooks = __bind(this._setUserActionHooks, this);
      this._translatePath = __bind(this._translatePath, this);
      this._translateXY = __bind(this._translateXY, this);
      this._updateTick = __bind(this._updateTick, this);
      this._freezeNodes = __bind(this._freezeNodes, this);
      this._unfreezeNodes = __bind(this._unfreezeNodes, this);
      this._changeFixedTo = __bind(this._changeFixedTo, this);
      this._freezeAfter = __bind(this._freezeAfter, this);
      this._unfreezeFor = __bind(this._unfreezeFor, this);
      this._userLinkAction = __bind(this._userLinkAction, this);
      this._userLinkDelete = __bind(this._userLinkDelete, this);
      this._userLinkAdd = __bind(this._userLinkAdd, this);
      this._userLinkUpdate = __bind(this._userLinkUpdate, this);
      this._userNodeDelete = __bind(this._userNodeDelete, this);
      this._userNodeAdd = __bind(this._userNodeAdd, this);
      this.vis = this.body.find("svg#mobogo-graph");
      this.svg = d3.select(this.vis[0]);
      this._setup();
      this._updateData(data.nodes, data.links);
      this._drawChart();
      this._setHooks();
    }

    MabogoGraph.prototype._setup = function() {
      this.Utility = new Utility();
      this.Constants = new MabogoGraphConstants();
      this.colorScale = d3.scale.category20();
      this.force = d3.layout.force().size([this.Constants.GRAPH_WIDTH, this.Constants.GRAPH_HEIGHT]).linkDistance(110).charge(-600);
      this.frozen = false;
      this.fromXY = d3.map();
      this.showcasing = false;
      return this.activeUserAction = [];
    };

    MabogoGraph.prototype._updateData = function(nodes, links) {
      var circleRadius, countExtent, nodesMap,
        _this = this;

      countExtent = d3.extent(nodes, function(d) {
        return d.links;
      });
      circleRadius = d3.scale.sqrt().range([6, 16]).domain(countExtent);
      nodes.forEach(function(node) {
        node.radius = circleRadius(node.links);
        node.x = Math.random() * _this.Constants.GRAPH_WIDTH;
        return node.y = Math.random() * _this.Constants.GRAPH_HEIGHT;
      });
      nodesMap = this.Utility.mapNodes(nodes);
      links.forEach(function(link) {
        var _ref;

        return _ref = [link.source, link.target].map(function(l) {
          return nodesMap.get(l);
        }), link.source = _ref[0], link.target = _ref[1], _ref;
      });
      return this.force.nodes(nodes).links(links).on("tick", this._updateTick).start();
    };

    MabogoGraph.prototype._drawChart = function() {
      var _ref,
        _this = this;

      this.svg.attr('width', this.Constants.GRAPH_WIDTH).attr("height", this.Constants.GRAPH_HEIGHT);
      _ref = ['pathG', 'nodeG', 'textG'].map(function(c) {
        return _this.svg.append("svg:g").attr("class", c);
      }), this.pathG = _ref[0], this.nodeG = _ref[1], this.textG = _ref[2];
      this._updateLinks();
      this._updateNodes();
      this._updateText();
      return this._freezeAfter(4000);
    };

    MabogoGraph.prototype._addMarkers = function() {
      this.markers = this.svg.append("svg:defs").selectAll("marker").data(["friend", "acquaintance"]);
      return this.markers.enter().append("svg:marker").attr("id", String).attr("viewBox", "0 -5 10 10").attr("refX", 15).attr("refY", -1.5).attr("markerWidth", 10).attr("markerHeight", 10).attr("orient", "auto").append("svg:path").attr("d", "M0,-5L10,0L0,5");
    };

    MabogoGraph.prototype._updateLinks = function() {
      var _this = this;

      this.path = this.pathG.selectAll("path.link").data(this.force.links());
      console.log(this.path);
      this.path.enter().append("svg:path").attr("class", function(d) {
        return "link " + d.type;
      }).attr("stroke-opacity", function() {
        return _this.Constants.NORMAL_LINK_OPACITY;
      });
      return this.path.exit().remove();
    };

    MabogoGraph.prototype._updateNodes = function() {
      var context,
        _this = this;

      context = this;
      this.node = this.nodeG.selectAll("circle.node").data(this.force.nodes());
      this.node.enter().append("svg:circle").attr("class", "node").attr("r", function(d) {
        return d.radius;
      }).attr("x", function(d) {
        return d.x;
      }).attr("y", function(d) {
        return d.y;
      }).style("fill", function(d) {
        return _this.colorScale(d.type);
      }).on("dblclick", function(d, i) {
        return _this._showcaseSubnetwork(d);
      });
      this._addOnHover();
      return this.node.exit().remove();
    };

    MabogoGraph.prototype._userNodeAdd = function(d) {
      return console.log("_userAddNode");
    };

    MabogoGraph.prototype._userNodeDelete = function(d) {
      return console.log("_userDeleteNode");
    };

    MabogoGraph.prototype._userLinkUpdate = function(d) {
      return console.log("_userUpdateLink");
    };

    MabogoGraph.prototype._userLinkAdd = function(d, linkType) {
      var _link, _linkExists,
        _this = this;

      if (linkType == null) {
        linkType = 'friend';
      }
      _link = {
        source: this.onClickFrom,
        target: this.onClickTo,
        type: linkType
      };
      _linkExists = this.force.links().filter(function(link) {
        var _ref, _ref1;

        return ((_ref = link.source) === _this.onClickFrom || _ref === _this.onClickTo) && ((_ref1 = link.target) === _this.onClickFrom || _ref1 === _this.onClickTo);
      }).length > 0;
      if (!_linkExists) {
        this.force.links().push(_link);
        this._updateLinks();
        this._translatePath(this.path.transition());
        return this._unfreezeFor(2000);
      }
    };

    MabogoGraph.prototype._userLinkDelete = function(d) {
      var links,
        _this = this;

      links = this.force.links().filter(function(link) {
        var _ref, _ref1;

        return ((_ref = link.source) !== _this.onClickFrom && _ref !== _this.onClickTo) || ((_ref1 = link.target) !== _this.onClickFrom && _ref1 !== _this.onClickTo);
      });
      if (links.length !== this.force.links().length) {
        this.force.links(links);
        this._updateLinks();
        return this._unfreezeFor(2000);
      }
    };

    MabogoGraph.prototype._userLinkAction = function(d, linkAction, callback) {
      if (this.onClickFrom == null) {
        this.onClickFrom = d;
        return console.log(this.onClickFrom);
      } else {
        this.onClickTo = d;
        console.log(this.onClickTo, this.onClickFrom);
        if (this.onClickFrom.id !== this.onClickTo.id) {
          linkAction(d);
        }
        callback();
        this.onClickFrom = null;
        return this.onClickTo = null;
      }
    };

    MabogoGraph.prototype._showcaseSubnetwork = function(center) {
      var fromXY, radialMap, restoreXY, toXY, _ref,
        _this = this;

      if (this.frozen) {
        if (center.id === ((_ref = this.centerNode) != null ? _ref.id : void 0)) {
          this.showcasing = false;
          this._translateGraph(this.fromXY);
          this.fromXY = d3.map();
          this.centerNode = null;
          this._restoreOpacity();
          return this._addOnHover();
        } else {
          this.showcasing = true;
          this.showcasedNodes = [];
          this.showcasedLinks = [];
          this.centerNode = center;
          toXY = d3.map();
          fromXY = d3.map();
          this._setFromXY(fromXY, center);
          toXY.set(center.id, {
            x: this.Constants.GRAPH_WIDTH / 2,
            y: this.Constants.GRAPH_HEIGHT / 2
          });
          this.showcasedLinks = this.force.links().filter(function(link) {
            return center === link.source || center === link.target;
          });
          this.showcasedNodes = this.showcasedLinks.map(function(link) {
            if (center === link.source) {
              return link.target;
            } else {
              return link.source;
            }
          });
          this.showcasedNodes.forEach(function(node) {
            return _this._setFromXY(fromXY, node);
          });
          radialMap = RadialPlacement().center(toXY.get(center.id)).keys(this.showcasedNodes.map(function(node) {
            return node.id;
          }));
          this.showcasedNodes.forEach(function(node) {
            return toXY.set(node.id, radialMap(node.id));
          });
          restoreXY = this.Utility.mapAMinusB(this.fromXY, fromXY);
          [toXY, restoreXY].forEach(function(argMap) {
            return _this._translateGraph(argMap);
          });
          this._highlightShowcased(toXY);
          this._removeOnHover();
          this.fromXY = fromXY;
          return this._postShowcaseInfoToPanel(this.centerNode, this.showcasedLinks);
        }
      }
    };

    MabogoGraph.prototype._addOnHover = function() {
      var context;

      context = this;
      return this.node.on("mouseover", function(d, i) {
        return context._showDetails(context, this, d);
      }).on("mouseout", function(d, i) {
        return context._hideDetails(context, this, d);
      });
    };

    MabogoGraph.prototype._removeOnHover = function() {
      var context;

      context = this;
      return this.node.on("mouseover", function(d, i) {
        if (__indexOf.call(context.showcasedNodes, d) >= 0) {
          return context._showPreviewDetails(context, this, d);
        } else {
          return null;
        }
      }).on("mouseout", function(d, i) {
        if (__indexOf.call(context.showcasedNodes, d) >= 0) {
          return context._hidePreviewDetails(context, this, d);
        } else {
          return null;
        }
      });
    };

    MabogoGraph.prototype._showPreviewDetails = function(context, obj, d) {
      return context.path.attr("stroke-opacity", function(l) {
        var cond1, cond2;

        cond1 = l.source === d && l.target === context.centerNode;
        cond2 = l.source === context.centerNode && l.target === d;
        if (cond1 || cond2) {
          return 1.0;
        } else {
          return d3.select(this).attr("stroke-opacity");
        }
      });
    };

    MabogoGraph.prototype._hidePreviewDetails = function(context, obj, d) {
      return context.path.attr("stroke-opacity", function(l) {
        if (parseFloat(d3.select(this).attr("stroke-opacity")) === 1.0) {
          return context.Constants.NORMAL_LINK_OPACITY;
        } else {
          return d3.select(this).attr("stroke-opacity");
        }
      });
    };

    MabogoGraph.prototype._highlightShowcased = function(toXY) {
      var _this = this;

      [this.node, this.text].forEach(function(selector) {
        return selector.attr("opacity", function(d) {
          if (toXY.has(d.id) || d === _this.centerNode) {
            return 1.0;
          } else {
            return _this.Constants.HIDDEN_NODE_OPACITY;
          }
        });
      });
      return this.path.attr("stroke-opacity", function(l) {
        var cond, _ref;

        cond = [];
        cond.push((_ref = _this.centerNode) === l.source || _ref === l.target);
        cond.push(toXY.has(l.source.id) && toXY.has(l.target.id));
        if (cond.reduce(function(s, t) {
          return s || t;
        })) {
          return _this.Constants.NORMAL_LINK_OPACITY;
        } else {
          return _this.Constants.HIDDEN_LINK_OPACITY;
        }
      });
    };

    MabogoGraph.prototype._restoreOpacity = function() {
      var _this = this;

      [this.node, this.text].forEach(function(selector) {
        return selector.attr("opacity", 1.0);
      });
      return this.path.attr("stroke-opacity", this.Constants.NORMAL_LINK_OPACITY);
    };

    MabogoGraph.prototype._translateGraph = function(mapXY) {
      var _this = this;

      [this.node, this.text].forEach(function(selector) {
        return _this._translateXY(selector.transition(), mapXY);
      });
      return this._translatePath(this.path.transition());
    };

    MabogoGraph.prototype._setFromXY = function(fromXY, node) {
      var val, _ref;

      val = (_ref = this.fromXY.get(node.id)) != null ? _ref : {
        x: node.x,
        y: node.y
      };
      return fromXY.set(node.id, val);
    };

    MabogoGraph.prototype._showDetails = function(context, obj, d) {
      context.path.attr("stroke-opacity", function(l) {
        if (l.source === d || l.target === d) {
          return 1.0;
        } else {
          return context.Constants.NORMAL_LINK_OPACITY;
        }
      });
      return d3.select(obj).style("fill", "#ddd");
    };

    MabogoGraph.prototype._hideDetails = function(context, obj, d) {
      context.path.attr("stroke-opacity", context.Constants.NORMAL_LINK_OPACITY);
      return d3.select(obj).style("fill", this.colorScale(d.type));
    };

    MabogoGraph.prototype._updateText = function() {
      var _this = this;

      this.text = this.textG.selectAll("g").data(this.force.nodes());
      (function(g) {
        return ["shadow", "lbl"].forEach(function(clss) {
          return g.append("svg:text").attr("x", 8).attr("y", ".31em").attr("class", clss).text(function(d) {
            return d.name;
          });
        });
      })(this.text.enter().append("svg:g"));
      return this.text.exit().remove();
    };

    MabogoGraph.prototype._unfreezeFor = function(time) {
      this._unfreezeNodes();
      this._updateNodes();
      this.force.start();
      return this._freezeAfter(time);
    };

    MabogoGraph.prototype._freezeAfter = function(time) {
      return window.setTimeout(this._freezeNodes, time);
    };

    MabogoGraph.prototype._changeFixedTo = function(val) {
      this.force.nodes().forEach(function(node) {
        return node.fixed = val;
      });
      return this.frozen = val;
    };

    MabogoGraph.prototype._unfreezeNodes = function() {
      console.log(this.frozen);
      if (this.frozen) {
        return this._changeFixedTo(false);
      }
    };

    MabogoGraph.prototype._freezeNodes = function() {
      if (!this.frozen) {
        return this._changeFixedTo(true);
      }
    };

    MabogoGraph.prototype._updateTick = function() {
      var _this = this;

      if (!this.showcasing) {
        [this.node, this.text].forEach(function(selection) {
          return _this._translateXY(selection);
        });
        return this._translatePath(this.path);
      }
    };

    MabogoGraph.prototype._translateXY = function(selection, mapXY) {
      if (mapXY == null) {
        mapXY = null;
      }
      return selection.attr("transform", function(d) {
        var _ref, _ref1, _ref2, _ref3;

        d.x = (_ref = mapXY != null ? (_ref1 = mapXY.get(d.id)) != null ? _ref1.x : void 0 : void 0) != null ? _ref : d.x;
        d.y = (_ref2 = mapXY != null ? (_ref3 = mapXY.get(d.id)) != null ? _ref3.y : void 0 : void 0) != null ? _ref2 : d.y;
        return "translate(" + d.x + "," + d.y + ")";
      });
    };

    MabogoGraph.prototype._translatePath = function(path) {
      return path.attr("d", function(d) {
        var dr, dx, dy;

        dx = d.target.x - d.source.x;
        dy = d.target.y - d.source.y;
        dr = Math.sqrt(dx * dx + dy * dy);
        return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
      });
    };

    MabogoGraph.prototype._postShowcaseInfoToPanel = function(center, showcasedLinks) {
      var links, tableBody;

      $('#node-name').text(center.name);
      tableBody = d3.select($('#relationship-table').find('tbody').empty()[0]);
      links = showcasedLinks.map(function(link) {
        var tmp;

        return tmp = {
          name: link.source === center ? link.target.name : link.source.name,
          type: link.type
        };
      });
      return tableBody.selectAll('tr').data(links).enter().append('tr').selectAll('td').data(function(d) {
        return [d.name, d.type];
      }).enter().append('td').text(function(d) {
        return d;
      });
    };

    MabogoGraph.prototype._setHooks = function() {
      var _this = this;

      $('.nav-tabs').button();
      $('#graph-save').click(function(e) {
        var _this = this;

        $(this).button('loading');
        return window.setTimeout((function() {
          return $(_this).button('reset');
        }), 2000);
      });
      $('#graph-reset').click(function(e) {
        return console.log("reset");
      });
      ['#node-add', '#node-delete', '#link-add', '#link-delete'].forEach(function(selector) {
        return $(selector).click(function(e) {
          return _this._addNewUserAction(selector);
        });
      });
      return this._setUserActionHooks();
    };

    MabogoGraph.prototype._setUserActionHooks = function() {
      var _this = this;

      this.node.on("click", function(d, i) {
        return _this._userActionDispatcher(d, _this._userNodeAction);
      });
      return $(this.vis[0]).click(function(e) {
        return _this._userActionDispatcher(null, function(d) {
          if (_this.activeUserAction[0] === '#node-add') {
            console.log("add node");
            return _this._resetUserAction();
          }
        });
      });
    };

    MabogoGraph.prototype._userActionDispatcher = function(d, dispatcher) {
      var _ref;

      if (this.frozen) {
        if (!this.showcasing) {
          dispatcher(d);
        }
      }
      return (_ref = d3.event) != null ? _ref.stopPropagation() : void 0;
    };

    MabogoGraph.prototype._userNodeAction = function(d) {
      switch (this.activeUserAction[0]) {
        case '#link-add':
          return this._userLinkAction(d, this._userLinkAdd, this._resetUserAction);
        case '#link-delete':
          return this._userLinkAction(d, this._userLinkDelete, this._resetUserAction);
        case '#node-delete':
          console.log("node-delete");
          return this._resetUserAction();
      }
    };

    MabogoGraph.prototype._addNewUserAction = function(newUserAction) {
      var lastUserAction;

      if (this.activeUserAction.length > 0) {
        lastUserAction = this.activeUserAction.pop();
        if (newUserAction !== lastUserAction) {
          $(lastUserAction).button('toggle');
          return this.activeUserAction.push(newUserAction);
        }
      } else {
        return this.activeUserAction.push(newUserAction);
      }
    };

    MabogoGraph.prototype._resetUserAction = function() {
      return $(this.activeUserAction.pop()).button('toggle');
    };

    return MabogoGraph;

  })();

  $(function() {
    return $("#mobogo-graph-container").each(function() {
      var _this = this;

      return d3.json("data.json", function(err, data) {
        return new MabogoGraph($(_this), data);
      });
    });
  });

}).call(this);
