// Generated by CoffeeScript 1.6.2
(function() {
  var MabogoGraph, RadialPlacement,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RadialPlacement = function() {
    var center, current, increment, place, placement, radialLocation, radius, setKeys, start, values;

    values = d3.map();
    increment = 20;
    radius = 200;
    center = {
      "x": 0,
      "y": 0
    };
    start = -120;
    current = start;
    radialLocation = function(center, angle, radius) {
      var x, y;

      x = center.x + radius * Math.cos(angle * Math.PI / 180);
      y = center.y + radius * Math.sin(angle * Math.PI / 180);
      return {
        "x": x,
        "y": y
      };
    };
    placement = function(key) {
      var value;

      value = values.get(key);
      if (!values.has(key)) {
        value = place(key);
      }
      return value;
    };
    place = function(key) {
      var value;

      value = radialLocation(center, current, radius);
      values.set(key, value);
      current += increment;
      return value;
    };
    setKeys = function(keys) {
      var innerKeys;

      values = d3.map();
      increment = 360 / keys.length;
      innerKeys = keys.splice(0);
      return innerKeys.forEach(function(k) {
        return place(k);
      });
    };
    placement.keys = function(_) {
      if (!arguments.length) {
        return d3.keys(values);
      }
      setKeys(_);
      return placement;
    };
    placement.center = function(_) {
      if (!arguments.length) {
        return center;
      }
      center = _;
      return placement;
    };
    placement.radius = function(_) {
      if (!arguments.length) {
        return radius;
      }
      radius = _;
      return placement;
    };
    placement.start = function(_) {
      if (!arguments.length) {
        return start;
      }
      start = _;
      current = start;
      return placement;
    };
    return placement;
  };

  MabogoGraph = (function() {
    function MabogoGraph(body, data) {
      this.body = body;
      this._updateTick = __bind(this._updateTick, this);
      this._freezeNodes = __bind(this._freezeNodes, this);
      this.vis = this.body.find("svg#mobogo-graph");
      this.svg = d3.select(this.vis[0]);
      this._setup();
      this._updateData(data.nodes, data.links);
      this._drawChart();
    }

    MabogoGraph.prototype._setup = function() {
      this.graphWidth = 800;
      this.graphHeight = 600;
      this.colorScale = d3.scale.category20();
      this.force = d3.layout.force().size([this.graphWidth, this.graphHeight]).linkDistance(110).charge(-600);
      this.showcaseForce = d3.layout.force().size([this.graphWidth, this.graphHeight]).linkDistance(110).charge(-600);
      return this.frozen = false;
    };

    MabogoGraph.prototype._updateData = function(nodes, links) {
      var circleRadius, countExtent, nodesMap;

      countExtent = d3.extent(nodes, function(d) {
        return d.links;
      });
      circleRadius = d3.scale.sqrt().range([6, 16]).domain(countExtent);
      nodes.forEach(function(node) {
        node.radius = circleRadius(node.links);
        node.x = Math.random() * this.graphWidth;
        return node.y = Math.random() * this.graphHeight;
      });
      nodesMap = this._mapNodes(nodes);
      links.forEach(function(link) {
        var _ref;

        return _ref = [link.source, link.target].map(function(l) {
          return nodesMap.get(l);
        }), link.source = _ref[0], link.target = _ref[1], _ref;
      });
      return this.force.nodes(nodes).links(links).on("tick", this._updateTick).start();
    };

    MabogoGraph.prototype._mapNodes = function(nodes) {
      var nodesMap;

      nodesMap = d3.map();
      nodes.forEach(function(node) {
        return nodesMap.set(node.id, node);
      });
      return nodesMap;
    };

    MabogoGraph.prototype._drawChart = function() {
      var _ref,
        _this = this;

      this.svg.attr('width', this.graphWidth).attr("height", this.graphHeight);
      this._addMarkers();
      _ref = ['pathG', 'nodeG', 'textG'].map(function(c) {
        return _this.svg.append("svg:g").attr("class", c);
      }), this.pathG = _ref[0], this.nodeG = _ref[1], this.textG = _ref[2];
      this._updateChart();
      return window.setTimeout(this._freezeNodes, 4000);
    };

    MabogoGraph.prototype._updateChart = function() {
      this._updateLinks();
      this._updateNodes();
      return this._updateText();
    };

    MabogoGraph.prototype._addMarkers = function() {
      return this.svg.append("svg:defs").selectAll("marker").data(["friend", "acquaintance"]).enter().append("svg:marker").attr("id", String).attr("viewBox", "0 -5 10 10").attr("refX", 15).attr("refY", -1.5).attr("markerWidth", 10).attr("markerHeight", 10).attr("orient", "auto").append("svg:path").attr("d", "M0,-5L10,0L0,5");
    };

    MabogoGraph.prototype._updateLinks = function() {
      this.path = this.pathG.selectAll("path.link").data(this.force.links());
      this.path.enter().append("svg:path").attr("class", function(d) {
        return "link " + d.type;
      }).attr("stroke-opacity", 0.5).attr("marker-end", function(d) {
        return "url(#" + d.type + ")";
      });
      return this.path.exit().remove();
    };

    MabogoGraph.prototype._updateNodes = function() {
      var context,
        _this = this;

      context = this;
      this.node = this.nodeG.selectAll("circle.node").data(this.force.nodes());
      this.node.enter().append("svg:circle").attr("class", "node").attr("r", function(d) {
        return d.radius;
      }).style("fill", function(d) {
        return _this.colorScale(d.type);
      }).call(this.force.drag).on("mouseover", function(d, i) {
        return context._showDetails(context, this, d);
      }).on("mouseout", function(d, i) {
        return context._hideDetails(context, this, d);
      }).on("click", function(d, i) {
        if (_this.frozen) {
          return _this._showcaseSubnetwork(d);
        }
      });
      return this.node.exit().remove();
    };

    MabogoGraph.prototype._showcaseSubnetwork = function(d) {
      var nodesMap, radialMap,
        _this = this;

      this.showcase = {
        nodes: [],
        links: [],
        centerNode: null
      };
      this.force.nodes().forEach(function(node) {
        var center, _ref, _ref1;

        if (d.id === node.id) {
          center = node;
          _ref = [center.x, center.y], center.prev_x = _ref[0], center.prev_y = _ref[1];
          _ref1 = [_this.graphWidth / 2, _this.graphHeight / 2], center.x = _ref1[0], center.y = _ref1[1];
          return _this.showcase.centerNode = center;
        }
      });
      this.force.links().forEach(function(link) {
        var node, _ref, _ref1;

        if ((_ref = d.id) === link.source.id || _ref === link.target.id) {
          _this.showcase.links.push(link);
          node = d.id === link.source.id ? link.target : link.source;
          _ref1 = [node.x, node.y], node.prev_x = _ref1[0], node.prev_y = _ref1[1];
          return _this.showcase.nodes.push(node);
        }
      });
      radialMap = RadialPlacement().center({
        "x": this.showcase.centerNode.x,
        "y": this.showcase.centerNode.y
      }).keys(this.showcase.nodes.map(function(node) {
        return node.id;
      }));
      this.showcase.nodes.forEach(function(node) {
        var _ref;

        return _ref = [radialMap(node.id).x, radialMap(node.id).y], node.x = _ref[0], node.y = _ref[1], _ref;
      });
      nodesMap = this._mapNodes(this.showcase.nodes);
      nodesMap.set(this.showcase.centerNode.id, this.showcase.centerNode);
      this.showcase.links.forEach(function(link) {
        var _ref;

        return _ref = [link.source.id, link.target.id].map(function(l) {
          return nodesMap.get(l);
        }), link.source = _ref[0], link.target = _ref[1], _ref;
      });
      return console.log(this.showcase);
    };

    MabogoGraph.prototype._showDetails = function(context, obj, d) {
      context.path.attr("stroke-opacity", function(l) {
        if (l.source === d || l.target === d) {
          return 1.0;
        } else {
          return 0.5;
        }
      });
      return d3.select(obj).style("fill", "#ddd");
    };

    MabogoGraph.prototype._hideDetails = function(context, obj, d) {
      context.path.attr("stroke-opacity", 0.5);
      return d3.select(obj).style("fill", this.colorScale(d.type));
    };

    MabogoGraph.prototype._updateText = function() {
      var g;

      this.text = this.textG.selectAll("g").data(this.force.nodes());
      g = this.text.enter().append("svg:g");
      g.append("svg:text").attr("x", 8).attr("y", ".31em").attr("class", "shadow").text(function(d) {
        return d.name;
      });
      g.append("svg:text").attr("x", 8).attr("y", ".31em").text(function(d) {
        return d.name;
      });
      return this.text.exit().remove();
    };

    MabogoGraph.prototype._freezeNodes = function() {
      if (!this.frozen) {
        this.force.nodes().forEach(function(node) {
          return node.fixed = true;
        });
        return this.frozen = true;
      }
    };

    MabogoGraph.prototype._updateTick = function() {
      this.path.attr("d", function(d) {
        var _this = this;

        return (function(dx, dy) {
          var dr;

          dr = Math.sqrt(dx * dx + dy * dy);
          return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
        })(d.target.x - d.source.x, d.target.y - d.source.y);
      });
      this.node.attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
      return this.text.attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
    };

    return MabogoGraph;

  })();

  $(function() {
    return $("#mobogo-graph-container").each(function() {
      var _this = this;

      return d3.json("data.json", function(err, data) {
        return new MabogoGraph($(_this), data);
      });
    });
  });

}).call(this);
